package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"log"
	"os"

	"github.com/robbiet480/generate"
	"github.com/robbiet480/generate/jsonschema"
)

var (
	o = flag.String("o", "", "The output file for the schema.")
	p = flag.String("p", "main", "The package that the structs are created in.")
	i = flag.String("i", "", "A single file path (used for backwards compatibility).")
)

func main() {
	flag.Parse()

	inputFiles := flag.Args()
	if *i != "" {
		inputFiles = append(inputFiles, *i)
	}
	if len(inputFiles) == 0 {
		log.Fatal("No input JSON Schema files.")
	}

	schemata, err := jsonschema.FromFiles(inputFiles)

	g := generate.New(schemata...)

	structs, err := g.CreateStructs()
	if err != nil {
		log.Fatalf("failed to generate structs: %s", err)
	}

	buf := &bytes.Buffer{}

	fmt.Fprintln(buf, "// Code generated by schema-generate. DO NOT EDIT.\n")
	fmt.Fprintf(buf, "package %v\n", *p)

	for _, s := range structs {
		s.Write(buf)
	}

	out, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatalf("failed to 'go format' generated source: %s", err)
	}

	if *o == "" {
		_, err = fmt.Fprint(os.Stdout, string(out))
		if err != nil {
			log.Fatalf("Error writing to stdout: %s", err)
		}
	} else {
		f, err := os.Create(*o)
		if err != nil {
			log.Fatalf("Error opening output file: %s", err)
		}
		defer f.Close()

		_, err = fmt.Fprint(os.Stdout, string(out))
		if err != nil {
			log.Fatalf("Error writing to %s: %s", *o, err)
		}
	}
}
